#include <iostream>
#include <cmath>

// Функция
double f(double x) {
    return x * x * x + x * x * x * x / 4;
}

// Первая производная функции
double df(double x) {
    return 3 * x * x + x * x * x;
}

// Вторая производная функции
double d2f(double x) {
    return 6 * x + 3 * x * x;
}

// Метод Ньютона для нахождения минимума
double newtonMethod(double x0, double epsilon) {
    double x = x0;
    int iterations = 0;
    int function_calls = 0;

    std::cout << "Итерация | x | df(x) | d2f(x) |" << std::endl;
    std::cout << "--------------------------------------" << std::endl;

    while (std::abs(df(x)) > epsilon) {
        std::cout << iterations << " | " << x << " | " << df(x) << " | " << d2f(x) << " |" << std::endl;
        x = x - df(x) / d2f(x);  // Формула метода Ньютона
        iterations++;
        function_calls += 3; // Вычисление f(x), df(x), d2f(x)
    }

    std::cout << "--------------------------------------" << std::endl;
    std::cout << "Количество итераций: " << iterations << std::endl;
    std::cout << "Число вычислений функций: " << function_calls << std::endl;

    return x;
}

int main() {
    setlocale(LC_ALL, "RU");
    double x0 = -20;  // Начальное приближение 
    double epsilon = 0.005;  // Точность

    double minimum = newtonMethod(x0, epsilon);
    std::cout << "Найденный минимум: " << minimum << std::endl;

    return 0;
}

